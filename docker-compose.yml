services:
  # RabbitMQ
  rabbit:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - libraryMs

  # DATABASES

  ## Redis
  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    networks:
      - libraryMs

  ## MySQL - AuthServer
  authdb:
    image: mysql
    container_name: authdb
    ports:
      - "3308:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_AUTH}
      MYSQL_DATABASE: ${MYSQL_DATABASE_AUTH}
      MYSQL_USER: ${MYSQL_USER_AUTH}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD_AUTH}
    networks:
      - libraryMs

  ## MySQL - Book-service
  booksdb:
    image: mysql
    container_name: booksdb
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - libraryMs

  usersdb:
    image: postgres
    container_name: usersdb
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - libraryMs

  orderdb:
    image: postgres
    container_name: ordersdb
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      POSTGRES_USER: ${POSTGRES_ORDER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ORDER_PASSWORD}
      POSTGRES_DB: ${POSTGRES_ORDER_DB}
    networks:
      - libraryMs

  # MICROSERVICES

  ## Configserver
  configserver:
    image: "sebasanguloc/configserver:v1"
    container_name: configserver
    ports:
      - "8071:8071"
    depends_on:
      rabbit:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 60s
      retries: 15
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      OTEL_SERVICE_NAME: "configserver"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.19.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
    networks:
      - libraryMs

  ## Eurekaserver
  eurekaserver:
    image: "sebasanguloc/eurekaserver:v1"
    container_name: eurekaserver
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 60s
      retries: 15
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      OTEL_SERVICE_NAME: "eurekaserver"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.19.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
    networks:
      - libraryMs

  ## Book-MS
  bookservice:
    image: "sebasanguloc/book-service:v1"
    container_name: bookservice-ms
    ports:
      - "8081:8081"
    depends_on:
      booksdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 60s
      retries: 15
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "book-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
      SPRING_DATASOURCE_URL: "jdbc:mysql://booksdb:3306/${MYSQL_DATABASE}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      OTEL_SERVICE_NAME: "bookservice"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.19.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
    networks:
      - libraryMs

  ## User-MS
  usersservice:
    image: "sebasanguloc/user-service:v1"
    container_name: usersservice-ms
    ports:
      - "8082:8082"
    depends_on:
      usersdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 60s
      retries: 15
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "user-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://usersdb:5432/${POSTGRES_DB}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      OTEL_SERVICE_NAME: "user-service"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.19.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
    networks:
      - libraryMs

  ## Order-MS
  ordersservice:
    image: "sebasanguloc/order-service:v1"
    container_name: ordersservice-ms
    ports:
      - "8083:8083"
    depends_on:
      orderdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 60s
      retries: 15
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "order-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://ordersdb:5432/${POSTGRES_ORDER_DB}"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_ORDER_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_ORDER_PASSWORD}
      OTEL_SERVICE_NAME: "order-service"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.19.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
    networks:
      - libraryMs

  ## Authserver
  authserver:
    image: "sebasanguloc/authserver:v1"
    container_name: authserver
    healthcheck:
      test: "curl --fail --silent localhost:9001/actuator/health/readiness | grep UP || exit 1"
      interval: 30s
      timeout: 60s
      retries: 15
      start_period: 60s
    depends_on:
      authdb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    ports:
      - "9001:9001"
    environment:
      SPRING_APPLICATION_NAME: "authserver"
      SPRING_DATASOURCE_URL: "jdbc:mysql://authdb:3306/${MYSQL_DATABASE_AUTH}"
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER_AUTH}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD_AUTH}
      OTEL_SERVICE_NAME: "authserver"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.19.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
    networks:
      - libraryMs

  ## Edge Server-MS
  apigateway:
    image: "sebasanguloc/gatewayserver:v1"
    container_name: gatewayserver
    ports:
      - "8080:8080"
    depends_on:
      bookservice:
        condition: service_healthy
      usersservice:
        condition: service_healthy
      ordersservice:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8071/"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWT_SET_URI: http://authserver:9001/oauth2/jwks
      SPRING_DATA_REDIS_CONNECT_TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: "gatewayserver"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-2.19.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
      OTEL_METRICS_EXPORTER: none
      OTEL_LOGS_EXPORTER: none
    networks:
      - libraryMs

  # ------------------------ OBSERVABILITY ------------------------
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s
    networks: &loki-dns
      libraryMs:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    networks:
      - libraryMs

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - libraryMs

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - libraryMs

  backend:
    image: grafana/loki:latest
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      -  libraryMs

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - libraryMs

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - libraryMs

  tempo:
    image: grafana/tempo:2.6.1
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100"
      - "4318:4318"
    volumes:
      - ./observability/tempo/tempo.yml:/etc/tempo-config.yml
    networks:
      - libraryMs

networks:
  libraryMs:
    driver: "bridge"

volumes:
  rabbitmq_data:
    driver: local