services:
  # RabbitMQ
  rabbit:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - libraryMs

  # DATABASES

  ## Redis
  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    networks:
      - libraryMs

  ## MySQL - Book-service
  booksdb:
    image: mysql
    container_name: booksdb
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 10s
      retries: 10
      interval: 10s
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy

    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - libraryMs

  usersdb:
    image: postgres
    container_name: usersdb
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - libraryMs

  orderdb:
    image: postgres
    container_name: ordersdb
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      POSTGRES_USER: ${POSTGRES_ORDER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ORDER_PASSWORD}
      POSTGRES_DB: ${POSTGRES_ORDER_DB}
    networks:
      - libraryMs

  # MICROSERVICES

  ## Configserver
  configserver:
    image: "sebasanguloc/configserver:v1"
    container_name: configserver
    ports:
      - "8071:8071"
    depends_on:
      rabbit:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - libraryMs

  eurekaserver:
    image: "sebasanguloc/eurekaserver:v1"
    container_name: eurekaserver
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
    networks:
      - libraryMs


  ## Book-MS
  bookservice:
    image: "sebasanguloc/book-service:v1"
    container_name: bookservice-ms
    ports:
      - "8081:8081"
    depends_on:
      booksdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "book-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
      SPRING_DATASOURCE_URL: "jdbc:mysql://booksdb:3306/${MYSQL_DATABASE}"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - libraryMs

  ## User-MS
  usersservice:
    image: "sebasanguloc/user-service:v1"
    container_name: usersservice-ms
    ports:
      - "8082:8082"
    depends_on:
      usersdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "user-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://usersdb:5432/${POSTGRES_DB}"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - libraryMs

  ## Order-MS
  ordersservice:
    image: "sebasanguloc/order-service:v1"
    container_name: ordersservice-ms
    ports:
      - "8083:8083"
    depends_on:
      orderdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8083/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "order-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://ordersdb:5432/${POSTGRES_ORDER_DB}"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_ORDER_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_ORDER_PASSWORD}
    networks:
      - libraryMs

  ## Edge Server-MS
  apigateway:
    image: "sebasanguloc/gatewayserver:v1"
    container_name: gatewayserver
    ports:
      - "8080:8080"
    depends_on:
      bookservice:
        condition: service_healthy
      usersservice:
        condition: service_healthy
      ordersservice:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8070/eureka/"
      SPRING_CONFIG_IMPORT: "configserver:http://configserver:8071/"
      SPRING_DATA_REDIS_CONNECT_TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
    networks:
      - libraryMs


networks:
  libraryMs:
    driver: "bridge"